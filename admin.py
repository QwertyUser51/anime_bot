import sqlite3
from telebot import types
from config import admin_id, db_name
from db import new_movie, new_channel, get_channels, delete_anime, delete_channel

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–æ–≤)
admin_states = {}

def is_admin(user_id):
    return str(user_id) == admin_id

def create_admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ", 
        "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–µ",
        "üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
        "üë• –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤",
        "üé¨ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ",
        "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    markup.add(*buttons)
    return markup

def get_bot_stats():
    try:
        con = sqlite3.connect(db_name)
        cur = con.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∏–º–µ
        cur.execute("SELECT COUNT(*) FROM movies")
        anime_count = cur.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        cur.execute("SELECT COUNT(*) FROM channels")
        channels_count = cur.fetchone()[0]
        
        con.close()
        
        return anime_count, channels_count
        
    except Exception as e:
        return None, str(e)

def show_stats(bot, message):
    anime_count, channels_count = get_bot_stats()
    
    if isinstance(channels_count, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ—à–∏–±–∫–∞
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {channels_count}")
        return
    
    stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üé¨ –ê–Ω–∏–º–µ –≤ –±–∞–∑–µ: {anime_count}
üì¢ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: {channels_count}
"""
    bot.send_message(message.chat.id, stats_text)

def add_anime_start(bot, message, user_states):
    user_id = message.from_user.id
    user_states[user_id] = {'adding_anime': True, 'step': 'waiting_name'}
    bot.send_message(
        message.chat.id, 
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")
    )

def add_channel_start(bot, message, user_states):
    user_id = message.from_user.id
    user_states[user_id] = {'adding_channel': True, 'step': 'waiting_link'}
    bot.send_message(
        message.chat.id, 
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")
    )

def show_anime_list(bot, message):
    try:
        con = sqlite3.connect(db_name)
        cur = con.cursor()
        cur.execute("SELECT name, code FROM movies LIMIT 50")
        anime_list = cur.fetchall()
        con.close()
        
        if not anime_list:
            bot.send_message(message.chat.id, "üì≠ –ë–∞–∑–∞ –∞–Ω–∏–º–µ –ø—É—Å—Ç–∞")
            return
        
        text = "üé¨ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ (–ø–µ—Ä–≤—ã–µ 50):\n\n"
        for anime in anime_list:
            text += f"üîπ {anime[0]} - –ö–æ–¥: {anime[1]}\n"
        
        if len(text) > 4000:
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
            for part in parts:
                bot.send_message(message.chat.id, part)
        else:
            bot.send_message(message.chat.id, text)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_channels_list(bot, message):
    try:
        channels = get_channels()
        
        if not channels:
            bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        text = "üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        for channel in channels:
            text += f"üîπ ID: {channel['id']}\n–°—Å—ã–ª–∫–∞: {channel['link']}\n\n"
        
        bot.send_message(message.chat.id, text)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def delete_anime_start(bot, message, user_states):
    user_id = message.from_user.id
    user_states[user_id] = {'deleting_anime': True}
    bot.send_message(
        message.chat.id, 
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–Ω–∏–º–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")
    )

def delete_channel_start(bot, message, user_states):
    user_id = message.from_user.id
    user_states[user_id] = {'deleting_channel': True}
    bot.send_message(
        message.chat.id, 
        "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")
    )

def cancel_operation(bot, message, user_states):
    user_id = message.from_user.id
    user_states[user_id] = {'admin_mode': True}
    bot.send_message(
        message.chat.id, 
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
        reply_markup=create_admin_keyboard()
    )

def handle_admin_operations(bot, message, user_states):
    user_id = message.from_user.id
    
    if user_id not in user_states:
        return False
    
    state = user_states[user_id]
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–µ
    if state.get('adding_anime'):
        if state.get('step') == 'waiting_name':
            state['anime_name'] = message.text
            state['step'] = 'waiting_code'
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–Ω–∏–º–µ:")
            return True
        elif state.get('step') == 'waiting_code':
            try:
                code = int(message.text)
                if new_movie(state['anime_name'], code):
                    bot.send_message(
                        message.chat.id, 
                        f"‚úÖ –ê–Ω–∏–º–µ '{state['anime_name']}' —Å –∫–æ–¥–æ–º {code} –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                        reply_markup=create_admin_keyboard()
                    )
                else:
                    bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ")
                
                user_states[user_id] = {'admin_mode': True}
                return True
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return True
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    elif state.get('adding_channel'):
        if state.get('step') == 'waiting_link':
            state['channel_link'] = message.text
            state['step'] = 'waiting_id'
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (—á–∏—Å–ª–æ):")
            return True
        elif state.get('step') == 'waiting_id':
            try:
                channel_id = int(message.text)
                if new_channel(state['channel_link'], channel_id):
                    bot.send_message(
                        message.chat.id, 
                        f"‚úÖ –ö–∞–Ω–∞–ª —Å ID {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω!",
                        reply_markup=create_admin_keyboard()
                    )
                else:
                    bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                
                user_states[user_id] = {'admin_mode': True}
                return True
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return True
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–µ
    elif state.get('deleting_anime'):
        try:
            code = int(message.text)
            if delete_anime(code):
                bot.send_message(
                    message.chat.id, 
                    f"‚úÖ –ê–Ω–∏–º–µ —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª–µ–Ω–æ!",
                    reply_markup=create_admin_keyboard()
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –ê–Ω–∏–º–µ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            user_states[user_id] = {'admin_mode': True}
            return True
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return True
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    elif state.get('deleting_channel'):
        try:
            channel_id = int(message.text)
            if delete_channel(channel_id):
                bot.send_message(
                    message.chat.id, 
                    f"‚úÖ –ö–∞–Ω–∞–ª —Å ID {channel_id} —É–¥–∞–ª–µ–Ω!",
                    reply_markup=create_admin_keyboard()
                )
            else:
                bot.send_message(message.chat.id, "‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            user_states[user_id] = {'admin_mode': True}
            return True
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return True
    
    return False