import sqlite3
from telebot import TeleBot, types
from telebot.apihelper import ApiException
from db import *
from config import *
from admin import *

user_states = {}
bot = TeleBot(token)
init_db()

def check_user_subscription(user_id, channel_id):
    try:
        chat_member = bot.get_chat_member(channel_id, user_id)
        return chat_member.status in ['member', 'administrator', 'creator', 'restricted']
    except:
        return False

def check_all_subscriptions(user_id):
    channels = get_channels()
    if not channels:
        return True  
    
    for channel in channels:
        if not check_user_subscription(user_id, channel['id']):
            return False
    return True

def create_subscription_keyboard():
    channels = get_channels()
    markup = types.InlineKeyboardMarkup()
    
    for channel in channels:
        channel_button = types.InlineKeyboardButton(
            text="üì¢–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø",
            url=channel['link']
        )
        markup.add(channel_button)
    
    check_button = types.InlineKeyboardButton(
        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
        callback_data="check_subscription"
    )
    markup.add(check_button)
    
    return markup

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    search_button = types.KeyboardButton("üîç –ù–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ –∫–æ–¥—É")
    markup.add(search_button)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_states[user_id] = {'waiting_for_code': False}
    if check_all_subscriptions(user_id):
        show_main_menu(message.chat.id)
    else:
        show_subscription_request(message.chat.id)

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    user_states[user_id] = {'admin_mode': True}
    bot.send_message(
        message.chat.id, 
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        reply_markup=create_admin_keyboard()
    )

def show_subscription_request(chat_id):
    channels = get_channels()
    
    if not channels:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    message_text = (
        "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª–∞–º –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'</b>"
    )
    
    keyboard = create_subscription_keyboard()
    bot.send_message(chat_id, message_text, reply_markup=keyboard, parse_mode='HTML')

def show_main_menu(chat_id):
    markup = create_main_keyboard()
    bot.send_message(
        chat_id, 
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã.</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ –ø–æ –∫–æ–¥—É.", 
        reply_markup=markup,
        parse_mode='HTML'
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def handle_check_subscription(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    if check_all_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
            parse_mode='HTML'
        )
        show_main_menu(chat_id)
    else:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
        update_subscription_status(chat_id, message_id, user_id)

def update_subscription_status(chat_id, message_id, user_id):
    message_text = "\n<b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'</b>"
    keyboard = create_subscription_keyboard()
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=message_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –∞–Ω–∏–º–µ –ø–æ –∫–æ–¥—É")
def handle_search_request(message):
    user_id = message.from_user.id
    
    if not check_all_subscriptions(user_id):
        show_subscription_request(message.chat.id)
        return
    user_states[user_id] = {'waiting_for_code': True}
    bot.send_message(
        message.chat.id, 
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_stats(message):
    if is_admin(message.from_user.id):
        show_stats(bot, message)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ")
def handle_add_anime(message):
    if is_admin(message.from_user.id):
        add_anime_start(bot, message, user_states)

@bot.message_handler(func=lambda message: message.text == "üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
def handle_add_channel(message):
    if is_admin(message.from_user.id):
        add_channel_start(bot, message, user_states)

@bot.message_handler(func=lambda message: message.text == "üé¨ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ")
def handle_anime_list(message):
    if is_admin(message.from_user.id):
        show_anime_list(bot, message)

@bot.message_handler(func=lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
def handle_channels_list(message):
    if is_admin(message.from_user.id):
        show_channels_list(bot, message)

@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–µ")
def handle_delete_anime(message):
    if is_admin(message.from_user.id):
        delete_anime_start(bot, message, user_states)

@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
def handle_delete_channel(message):
    if is_admin(message.from_user.id):
        delete_channel_start(bot, message, user_states)

@bot.message_handler(func=lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_back_to_main(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        user_states[user_id] = {'admin_mode': False}
    
    if check_all_subscriptions(user_id):
        show_main_menu(message.chat.id)
    else:
        show_subscription_request(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def handle_cancel(message):
    if is_admin(message.from_user.id):
        cancel_operation(bot, message, user_states)

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    user_id = message.from_user.id
    
    if is_admin(user_id) and handle_admin_operations(bot, message, user_states):
        return

    if user_id not in user_states or not user_states[user_id].get('waiting_for_code', False):
        if check_all_subscriptions(user_id):
            show_main_menu(message.chat.id)
        else:
            show_subscription_request(message.chat.id)
        return
    
    code = message.text.strip()
    if not code.isdigit():
        bot.send_message(message.chat.id, "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    anime_name = get_movie(code)
    
    if anime_name:
        response = f"üéå <b>–ù–∞–π–¥–µ–Ω–Ω–æ–µ –∞–Ω–∏–º–µ:</b>\n\nüî¢ –ö–æ–¥: {code}\nüì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: {anime_name}"
    else:
        response = f"‚ùå –ê–Ω–∏–º–µ —Å –∫–æ–¥–æ–º {code} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    
    user_states[user_id]['waiting_for_code'] = False
    
    if check_all_subscriptions(user_id):
        bot.send_message(message.chat.id, response, reply_markup=create_main_keyboard(), parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, response, parse_mode='HTML')
        show_subscription_request(message.chat.id)

if __name__ == "__main__":
    bot.polling(none_stop=True)